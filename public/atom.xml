<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>My World</title>
  <icon>https://www.gravatar.com/avatar/7930e585b065a1293e22e6f2e1525b7f</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://linxiaotao.github.io/"/>
  <updated>2018-03-30T03:57:21.541Z</updated>
  <id>https://linxiaotao.github.io/</id>
  
  <author>
    <name>Leo</name>
    <email>linxioatao1993@vip.qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Activity启动流程(基于Android26)</title>
    <link href="https://linxiaotao.github.io/2018/03/27/Activity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B-%E5%9F%BA%E4%BA%8EAndroid26/"/>
    <id>https://linxiaotao.github.io/2018/03/27/Activity启动流程-基于Android26/</id>
    <published>2018-03-27T01:54:17.000Z</published>
    <updated>2018-03-30T03:57:21.541Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于 Android 26，分析 Android Activity 启动流程</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://gityuan.com/2016/03/12/start-activity/" target="_blank" rel="noopener">startActivity启动过程分析</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong>源码篇幅可能过长，所以会省略一下不必要的代码和注释</strong></p><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>                                    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">this</span>.startActivity(intent, <span class="keyword">null</span>);        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>                                                           </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (options != <span class="keyword">null</span>) &#123;                                          </span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>, options);                </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                                        </span><br><span class="line">        startActivityForResult(intent, -<span class="number">1</span>);                         </span><br><span class="line">    &#125;                                                               </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终都会调用到 <code>startActivityForResult</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startActivityForResult</span><span class="params">()</span> </span>&#123;                                                             </span><br><span class="line">    <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 转场动画的处理</span></span><br><span class="line">        Instrumentation.ActivityResult ar = mInstrumentation.execStartActivity();                                                                                                                                                      </span><br><span class="line">        <span class="keyword">if</span> (ar != <span class="keyword">null</span>) &#123;                                                                       </span><br><span class="line">            mMainThread.sendActivityResult();                                                                                                             </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;                                                                                        </span><br><span class="line">            mStartedActivity = <span class="keyword">true</span>;                                                            </span><br><span class="line">        &#125;                                                                                                                                                                             </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                                                                    </span><br><span class="line">        <span class="comment">// 如果存在 Parent Activity 则交由它处理                                                                                    </span></span><br><span class="line">    &#125;                                                                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道 Activity 启动委托给了 Instrumentation 进行实现</p><h3 id="Instrumentation"><a href="#Instrumentation" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActivityResult <span class="title">execStartActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由 ActivityThread.getApplicationThread 提供的 ApplicationThread</span></span><br><span class="line">    IApplicationThread whoThread = (IApplicationThread) contextThread;                                                                </span><br><span class="line">    <span class="keyword">if</span> (mActivityMonitors != <span class="keyword">null</span>) &#123;                                       </span><br><span class="line">        <span class="keyword">synchronized</span> (mSync) &#123;                                             </span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> N = mActivityMonitors.size();                        </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;N; i++) &#123;                                      </span><br><span class="line">                <span class="keyword">final</span> ActivityMonitor am = mActivityMonitors.get(i);       </span><br><span class="line">                ActivityResult result = <span class="keyword">null</span>;                              </span><br><span class="line">                <span class="keyword">if</span> (am.ignoreMatchingSpecificIntents()) &#123;</span><br><span class="line">                    <span class="comment">// true 表示这个监视器被用于使用 onStartActivity 拦截所有 Activity 启动 </span></span><br><span class="line">                    result = am.onStartActivity(intent);                   </span><br><span class="line">                &#125;                                                          </span><br><span class="line">                <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;                                      </span><br><span class="line">                    am.mHits++;                                            </span><br><span class="line">                    <span class="keyword">return</span> result;                                         </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (am.match(who, <span class="keyword">null</span>, intent)) &#123;</span><br><span class="line">                    <span class="comment">// match 使用 IntentFilter 和 类名 进行匹配</span></span><br><span class="line">                    am.mHits++;                                            </span><br><span class="line">                    <span class="keyword">if</span> (am.isBlocking()) &#123;</span><br><span class="line">                        <span class="comment">// 当前监视器阻止 Activity 启动</span></span><br><span class="line">                        <span class="keyword">return</span> requestCode &gt;= <span class="number">0</span> ? am.getResult() : <span class="keyword">null</span>;   </span><br><span class="line">                    &#125;                                                      </span><br><span class="line">                    <span class="keyword">break</span>;                                                 </span><br><span class="line">                &#125;                                                          </span><br><span class="line">            &#125;                                                              </span><br><span class="line">        &#125;                                                                  </span><br><span class="line">    &#125;                                                                      </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 委托为 ActivityManagerService(AMS) 去处理</span></span><br><span class="line">        <span class="keyword">int</span> result = ActivityManager.getService().startActivity();                          </span><br><span class="line">        <span class="comment">// 检查 AMS 的处理结果</span></span><br><span class="line">        checkStartActivityResult(result, intent);                          </span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;                                          </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);              </span><br><span class="line">    &#125;                                                                      </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;                                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过最后的调用委托给了<code>ActivityManager.getService</code>，实际上就是 ActivityManagerService(AMS) 的 Binder 代理类实现</p><blockquote><p>相对于之前的版本，比如 Android 23，现在已经没有了 ActivityManagerProxy 和 ActivityManagerNative，将直接与 system_server 进程上的 AMS 进行 IPC</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =          </span><br><span class="line">        <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;                                           </span><br><span class="line">            <span class="meta">@Override</span>                                                                 </span><br><span class="line">            <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;                                     </span><br><span class="line">                <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</span><br><span class="line">                <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);     </span><br><span class="line">                <span class="keyword">return</span> am;                                                            </span><br><span class="line">            &#125;                                                                         </span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><h3 id="ActivityManagerService"><a href="#ActivityManagerService" class="headerlink" title="ActivityManagerService"></a>ActivityManagerService</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>                                                                                       </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;                           </span><br><span class="line">    <span class="keyword">return</span> startActivityAsUser();                                                     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span>                                                                                                                          </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityAsUser</span><span class="params">()</span> </span>&#123;                                                                                                                                   </span><br><span class="line">    <span class="keyword">return</span> mActivityStarter.startActivityMayWait();                                                                                                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将启动请求又委托给了 ActivityStarter</p><h3 id="ActivityStarter"><a href="#ActivityStarter" class="headerlink" title="ActivityStarter"></a>ActivityStarter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">startActivityMayWait</span><span class="params">()</span> </span>&#123;                                                </span><br><span class="line">    <span class="comment">// Intent 的响应</span></span><br><span class="line">    ResolveInfo rInfo = mSupervisor.resolveIntent(intent, resolvedType, userId);                                                                                                                                           </span><br><span class="line">    <span class="comment">// Intent 的 Activity 信息                                                               </span></span><br><span class="line">    ActivityInfo aInfo = mSupervisor.resolveActivity(intent, rInfo, startFlags, profilerInfo);                                                                                                                                                                                                                                                                                                                                        </span><br><span class="line">        <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 调用 startActivityLocked</span></span><br><span class="line">        <span class="keyword">int</span> res = startActivityLocked(outRecord);                                                                                                                          </span><br><span class="line">        <span class="keyword">return</span> res;                                                                                                       </span><br><span class="line">    &#125;                                                                                                                     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 源 Activity 记录，即在哪个 Activity 进行 startActivity</span></span><br><span class="line">    ActivityRecord sourceRecord = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 如果使用 startActivityForResult，result 返回的 Activity 称为结果 Activity</span></span><br><span class="line">    ActivityRecord resultRecord = <span class="keyword">null</span>;                                                                       </span><br><span class="line">    <span class="keyword">if</span> (resultTo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 Activity Stack 中已经存在的源 Activity 记录</span></span><br><span class="line">        sourceRecord = mSupervisor.isInAnyStackLocked(resultTo);                                                                                 </span><br><span class="line">        <span class="keyword">if</span> (sourceRecord != <span class="keyword">null</span>) &#123;                                                                           </span><br><span class="line">            <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span> &amp;&amp; !sourceRecord.finishing) &#123;</span><br><span class="line">                <span class="comment">// requestCode &gt;= 0，源 Activity 同时为 结果 Activity</span></span><br><span class="line">                resultRecord = sourceRecord;                                                                  </span><br><span class="line">            &#125;                                                                                                 </span><br><span class="line">        &#125;                                                                                                     </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> launchFlags = intent.getFlags();                                                                </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> ((launchFlags &amp; Intent.FLAG_ACTIVITY_FORWARD_RESULT) != <span class="number">0</span> &amp;&amp; sourceRecord != <span class="keyword">null</span>) &#123;                   </span><br><span class="line">        <span class="comment">// 使用 FLAG_ACTIVITY_FORWARD_RESULT，可以将返回结果的源 Activity 转移为当前正在新启动的 Activity</span></span><br><span class="line">        <span class="comment">// 比如：A -&gt; B,B - C 使用了 FLAG_ACTIVITY_FORWARD_RESULT,那么 C 的 setResult 会返回给 A</span></span><br><span class="line">        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 不允许有 requestCode</span></span><br><span class="line">            ActivityOptions.abort(options);                                                                   </span><br><span class="line">            <span class="keyword">return</span> ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT;                                        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将源 Activity 的结果 Activity 设置为新 Activity 的结果 Activity</span></span><br><span class="line">        resultRecord = sourceRecord.resultTo;                                                                 </span><br><span class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span> &amp;&amp; !resultRecord.isInStackLocked()) &#123;                                        </span><br><span class="line">            resultRecord = <span class="keyword">null</span>;                                                                              </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// requestCode 处理</span></span><br><span class="line">        resultWho = sourceRecord.resultWho;                                                                   </span><br><span class="line">        requestCode = sourceRecord.requestCode;                                                               </span><br><span class="line">        sourceRecord.resultTo = <span class="keyword">null</span>;                                                                         </span><br><span class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除源 Activity 记录</span></span><br><span class="line">            resultRecord.removeResultsLocked(sourceRecord, resultWho, requestCode);                           </span><br><span class="line">        &#125;                                                                                                                                                                                         </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; intent.getComponent() == <span class="keyword">null</span>) &#123;                              </span><br><span class="line">        <span class="comment">// component 找不到                                                                         </span></span><br><span class="line">        err = ActivityManager.START_INTENT_NOT_RESOLVED;                                                      </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; aInfo == <span class="keyword">null</span>) &#123;                                              </span><br><span class="line">        <span class="comment">// ActivityInfo 找不到                                                                         </span></span><br><span class="line">        err = ActivityManager.START_CLASS_NOT_FOUND;                                                          </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; sourceRecord != <span class="keyword">null</span>                                          </span><br><span class="line">            &amp;&amp; sourceRecord.getTask().voiceSession != <span class="keyword">null</span>) &#123;                                                 </span><br><span class="line">        <span class="comment">// 语音启动 Activity，检查是否符合                                                                      </span></span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (err == ActivityManager.START_SUCCESS &amp;&amp; voiceSession != <span class="keyword">null</span>) &#123;                                       </span><br><span class="line">        <span class="comment">// 启动语音会话                                                       </span></span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">final</span> ActivityStack resultStack = resultRecord == <span class="keyword">null</span> ? <span class="keyword">null</span> : resultRecord.getStack();                  </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (err != START_SUCCESS) &#123;</span><br><span class="line">        <span class="comment">// 启动 Activity 失败</span></span><br><span class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 发送取消通知</span></span><br><span class="line">            resultStack.sendActivityResultLocked(                                                             </span><br><span class="line">                    -<span class="number">1</span>, resultRecord, resultWho, requestCode, RESULT_CANCELED, <span class="keyword">null</span>);                         </span><br><span class="line">        &#125;                                                                                                     </span><br><span class="line">        ActivityOptions.abort(options);                                                                       </span><br><span class="line">        <span class="keyword">return</span> err;                                                                                           </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="comment">// 进行一些权限检查，判断是否终止                                                              </span></span><br><span class="line">    <span class="keyword">if</span> (abort) &#123;</span><br><span class="line">        <span class="comment">// 如果需要终止 Activity</span></span><br><span class="line">        <span class="keyword">if</span> (resultRecord != <span class="keyword">null</span>) &#123;                                                                           </span><br><span class="line">            resultStack.sendActivityResultLocked();                                                                   </span><br><span class="line">        &#125;                                                                                                     </span><br><span class="line">        <span class="comment">// 返回启动成功，实际终止                                                                </span></span><br><span class="line">        ActivityOptions.abort(options);                                                                       </span><br><span class="line">        <span class="keyword">return</span> START_SUCCESS;                                                                                 </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="comment">// 如果权限检查是否在启动 Activity 之前，那么先启动权限检查的 Intent                                                             </span></span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="comment">// 处理 ephemeral app                                                                    </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造一个 ActivityRecord</span></span><br><span class="line">    ActivityRecord r = <span class="keyword">new</span> ActivityRecord();                                                   </span><br><span class="line">                                                                                                     </span><br><span class="line">    <span class="keyword">final</span> ActivityStack stack = mSupervisor.mFocusedStack;                                                    </span><br><span class="line">    <span class="keyword">if</span> (voiceSession == <span class="keyword">null</span> &amp;&amp; (stack.mResumedActivity == <span class="keyword">null</span>                                               </span><br><span class="line">            || stack.mResumedActivity.info.applicationInfo.uid != callingUid)) &#123;</span><br><span class="line">        <span class="comment">// 前台 stack 还没 resume 状态的 Activity，检查是否允许 app 切换</span></span><br><span class="line">        <span class="keyword">if</span> (!mService.checkAppSwitchAllowedLocked() &#123;                                          </span><br><span class="line">            PendingActivityLaunch pal =  <span class="keyword">new</span> PendingActivityLaunch();                                              </span><br><span class="line">            mPendingActivityLaunches.add(pal);                                                                </span><br><span class="line">            ActivityOptions.abort(options);</span><br><span class="line">            <span class="comment">// 切换 app 失败</span></span><br><span class="line">            <span class="keyword">return</span> ActivityManager.START_SWITCHES_CANCELED;                                                   </span><br><span class="line">        &#125;                                                                                                     </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">if</span> (mService.mDidAppSwitch) &#123;                                                                             </span><br><span class="line">        <span class="comment">// 从上次禁止 app 切换以来，这是第二次，允许 app 切换，并将切换时间设置为 0                                                            </span></span><br><span class="line">        mService.mAppSwitchesAllowedTime = <span class="number">0</span>;                                                                 </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                                                                                  </span><br><span class="line">        mService.mDidAppSwitch = <span class="keyword">true</span>;                                                                        </span><br><span class="line">    &#125;                                                                                                         </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行因为不允许 app 切换，而加到等待启动的 Activity</span></span><br><span class="line">    doPendingActivityLaunchesLocked(<span class="keyword">false</span>);                                                                   </span><br><span class="line">                                                                                                              </span><br><span class="line">    <span class="keyword">return</span> startActivity();                                                                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivity</span><span class="params">()</span> </span>&#123;                                                        </span><br><span class="line">    <span class="keyword">int</span> result = START_CANCELED;                                                               </span><br><span class="line">    <span class="keyword">try</span> &#123;                                                                                      </span><br><span class="line">        mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line">        <span class="comment">// 下一步流程</span></span><br><span class="line">        result = startActivityUnchecked();                           </span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;                                                                                </span><br><span class="line">        <span class="comment">// 如果启动 Activity 没有成功， 从 task 中移除 Activity                                                      </span></span><br><span class="line">        <span class="keyword">if</span> (!ActivityManager.isStartResultSuccessful(result)                                   </span><br><span class="line">                &amp;&amp; mStartActivity.getTask() != <span class="keyword">null</span>) &#123;                                         </span><br><span class="line">            mStartActivity.getTask().removeActivity(mStartActivity);                           </span><br><span class="line">        &#125;                                                                                      </span><br><span class="line">        mService.mWindowManager.continueSurfaceLayout();                                       </span><br><span class="line">    &#125;                                                                                          </span><br><span class="line">                                                                                               </span><br><span class="line">    postStartActivityProcessing();                                                                     </span><br><span class="line">                                                                                               </span><br><span class="line">    <span class="keyword">return</span> result;                                                                             </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">startActivityUnchecked</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置一些初始化状态</span></span><br><span class="line">    setInitialState();</span><br><span class="line">    <span class="comment">// 计算 launch flags</span></span><br><span class="line">    computeLaunchingTaskFlags();</span><br><span class="line">    <span class="comment">// 计算源 Task，源 Task 是否存在等</span></span><br><span class="line">    computeSourceStack();</span><br><span class="line">    <span class="comment">// 获取是否存在可以复用的 Activity，根据 flags 和 launchMode</span></span><br><span class="line">    ActivityRecord reusedActivity = getReusableIntentActivity();</span><br><span class="line">    <span class="keyword">if</span> (reusedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 存在可复用的 Activity，复用它</span></span><br><span class="line">        <span class="comment">// 可能需要清除 Task 中其他 Activity，并将启动的 Activity 前置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mStartActivity.packageName == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> START_CLASS_NOT_FOUND;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果启动的 Activity 与当前 Task 顶部的 Activity 相同，判断是否需要继续启动新的 Activity</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> dontStart = top != <span class="keyword">null</span> &amp;&amp; mStartActivity.resultTo == <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; top.realActivity.equals(mStartActivity.realActivity)</span><br><span class="line">                &amp;&amp; top.userId == mStartActivity.userId</span><br><span class="line">                &amp;&amp; top.app != <span class="keyword">null</span> &amp;&amp; top.app.thread != <span class="keyword">null</span></span><br><span class="line">                &amp;&amp; ((mLaunchFlags &amp; FLAG_ACTIVITY_SINGLE_TOP) != <span class="number">0</span></span><br><span class="line">                || mLaunchSingleTop || mLaunchSingleTask);</span><br><span class="line">    <span class="keyword">if</span>(dontStart)&#123;</span><br><span class="line">        <span class="comment">// 传递一个新的 Intent 到 onNewIntent </span></span><br><span class="line">        top.deliverNewIntentLocked();</span><br><span class="line">        <span class="keyword">return</span> START_DELIVERED_TO_TOP;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取 mTargetStack</span></span><br><span class="line">    <span class="keyword">if</span> (mStartActivity.resultTo == <span class="keyword">null</span> &amp;&amp; mInTask == <span class="keyword">null</span> &amp;&amp; !mAddingToTask</span><br><span class="line">                &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</span><br><span class="line">    newTask = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 需要创建新的 Task</span></span><br><span class="line">        result = setTaskFromReuseOrCreateNewTask();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mSourceRecord != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 从源 Activity 中获取 Task</span></span><br><span class="line">    result = setTaskFromSourceRecord();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mInTask != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 从 InTask 中获取 Task</span></span><br><span class="line">    result = setTaskFromInTask();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 可能创建新的 Task 或使用当前 Task，一般不会发生</span></span><br><span class="line">    setTaskToCurrentTopOrCreateNewTask();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 mTargetStack 启动 Activity </span></span><br><span class="line">    mTargetStack.startActivityLocked();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mTargetStack.isFocusable()</span><br><span class="line">                    || (topTaskActivity != <span class="keyword">null</span> &amp;&amp; topTaskActivity.mTaskOverlay</span><br><span class="line">                    &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">        <span class="comment">// 目标 Task 不可聚焦 ，或者源 Task 栈顶 Activity 总是在其他 Activity 之上，并且不为源 Activity</span></span><br><span class="line">            <span class="comment">// 那么我们不恢复目标 Task，只需要确保它可见即可</span></span><br><span class="line">            mTargetStack.ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mTargetStack.isFocusable() &amp;&amp; !mSupervisor.isFocusedStack(mTargetStack)) &#123;</span><br><span class="line">        <span class="comment">// 如果目标 Task 之前不是可聚焦，但是现在为可聚焦，那么移动到前台</span></span><br><span class="line">            mTargetStack.moveToFront(<span class="string">"startActivityUnchecked"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 恢复目标 Task</span></span><br><span class="line">        mSupervisor.resumeFocusedStackTopActivityLocked(mTargetStack, mStartActivity,</span><br><span class="line">                        mOptions);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不需要恢复，那么加到"最近活动"中</span></span><br><span class="line">        mTargetStack.addRecentActivityLocked(mStartActivity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> START_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setInitialState</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 获取 DisplayId</span></span><br><span class="line">    mSourceDisplayId = getSourceDisplayId();</span><br><span class="line">    <span class="comment">// 获取用于启动 Activity 的范围，Rect</span></span><br><span class="line">    mLaunchBounds = getOerrideBounds();</span><br><span class="line">    <span class="comment">// launchMode</span></span><br><span class="line">    mLaunchSingleTop = r.launchmode == LAUNCH_SINGLE_TOP;</span><br><span class="line">    mLaunchSingleInstance = r.launchMode == LAUNCH_SINGLE_INSTANCE;</span><br><span class="line">    mLaunchSingleTask = r.launchMode == LAUNCH_SINGLE_TASK;</span><br><span class="line">    <span class="comment">// Intent flags 的处理，如果和 Manifest 存在冲突，以 Manifest 为主</span></span><br><span class="line">    <span class="comment">// 如果 requestCode &gt;= 0，同时启动的 Activity 位于新的 Task，发送取消的结果给源 Activity</span></span><br><span class="line">    sendNewTaskResultRequestIfNeeded();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeLaunchingTaskFlags</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mSourceRecord == <span class="keyword">null</span> &amp;&amp; mInTask != <span class="keyword">null</span> &amp;&amp; mInTask.getStack() != <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 如果不存在源 Activity</span></span><br><span class="line">        <span class="keyword">final</span> Intent baseIntent = mInTask.getBaseIntent();</span><br><span class="line">        <span class="keyword">final</span> ActivityRecord root = mInTask.getRootActivity();</span><br><span class="line">        <span class="keyword">if</span> (baseIntent == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mLaunchSingleInstance || mLaunchSingleTask) &#123;</span><br><span class="line">            <span class="comment">// 如果设置了 SingleInstacne 或 SingleTask</span></span><br><span class="line">        <span class="keyword">if</span> (!baseIntent.getComponent().equals(mStartActivity.intent.getComponent()))&#123;</span><br><span class="line">                <span class="comment">// Task 不符合</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(root != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">// 已经存在 Task 根 Activity</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果不存在根 Activity，重新设置 launch flags</span></span><br><span class="line">            mAddingToTask = <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123;</span><br><span class="line">             mAddingToTask = <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            mAddingToTask = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                     <span class="keyword">if</span> ((mStartActivity.isResolverActivity() || mStartActivity.noDisplay) &amp;&amp; mSourceRecord != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; mSourceRecord.isFreeform())  &#123;</span><br><span class="line">                         <span class="comment">// 如果使用 ResolverActivity 启动或者 noDisplay</span></span><br><span class="line">                mAddingToTask = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(mInTask == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSourceRecord == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) == <span class="number">0</span> &amp;&amp; mInTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 不存在 Task，并且不存在源 Activity</span></span><br><span class="line">            mLaunchFlags |= FLAG_ACTIVITY_NEW_TASK;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mSourceRecord.launchMode == LAUNCH_SINGLE_INSTANCE) &#123;</span><br><span class="line">        <span class="comment">// 如果源 Activity 的 launchMode 是 SingleInstance，要设置 NEW_TASK flag</span></span><br><span class="line">            mLaunchFlags |= FLAG_ACTIVITY_NEW_TASK;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (mLaunchSingleInstance || mLaunchSingleTask) &#123;</span><br><span class="line">        <span class="comment">// 如果启动 Activity 的 launchMode 是 SingleInstance 或 SingleTask，需要设置 NEW_TASK flag</span></span><br><span class="line">            mLaunchFlags |= FLAG_ACTIVITY_NEW_TASK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ActivityStarter 主要的作用是，计算 launch flags，创建或者复用合适的 Task，即 ActivityStack，从而启动 Activity</p><h3 id="ActivityStack"><a href="#ActivityStack" class="headerlink" title="ActivityStack"></a>ActivityStack</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">startActivityLocked</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!newTask) &#123;</span><br><span class="line">      <span class="comment">// 如果从已存在的 Task 中启动 Activity</span></span><br><span class="line">      <span class="keyword">boolean</span> startIt = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> taskNdx = mTaskHistory.size() - <span class="number">1</span>; taskNdx &gt;= <span class="number">0</span>; --taskNdx) &#123;</span><br><span class="line">      task = mTaskHistory.get(taskNdx);</span><br><span class="line">          <span class="keyword">if</span> (task.getTopActivity() == <span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="comment">// 如果 task 不存在 Activity</span></span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (task == rTask) &#123;</span><br><span class="line">          <span class="comment">// 找到对应的 task</span></span><br><span class="line">            <span class="keyword">if</span> (!startIt) &#123;</span><br><span class="line">            <span class="comment">// 如果当前对于用户还不可见，那么只是添加它，而不启动它，它将在用户导航回来时启动</span></span><br><span class="line">                r.createWindowContainer();</span><br><span class="line">                ActivityOptions.abort(options);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (task.numFullscreen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              startIt = <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果当前 task 为活动 task，那么不需要传递 onuserLeaving 回调</span></span><br><span class="line">    <span class="keyword">if</span> (task == activityTask &amp;&amp; mTaskHistory.indexOf(task) != (mTaskHistory.size() - <span class="number">1</span>)) &#123;</span><br><span class="line">        mStackSupervisor.mUserLeaving = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!isHomeOrRecentsStack() || numActivities() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果当前不是 Home 或 Recent Task,或者活动 Activity 数量大于 0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理 动画</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (newTask) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((r.intent.getFlags() &amp; Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果设置了重置的标记</span></span><br><span class="line">            resetTaskIfNeededLocked(r, r);</span><br><span class="line">            doShow = topRunningNonDelayedActivityLocked(<span class="keyword">null</span>) == r;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options != <span class="keyword">null</span> &amp;&amp; options.getAnimationType()</span><br><span class="line">                    == ActivityOptions.ANIM_SCENE_TRANSITION) &#123;</span><br><span class="line">                <span class="comment">// 需要进行转场动画</span></span><br><span class="line">                doShow = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (r.mLaunchTaskBehind) &#123;</span><br><span class="line">        <span class="comment">// 如果为 true，那么不开启 window，但要确保 Activity 是可见的</span></span><br><span class="line">            r.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">            ensureActivitiesVisibleLocked(<span class="keyword">null</span>, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SHOW_APP_STARTING_PREVIEW &amp;&amp; doShow) &#123;</span><br><span class="line">            TaskRecord prevTask = r.getTask();</span><br><span class="line">            ActivityRecord prev = prevTask.topRunningActivityWithStartingWindowLocked();</span><br><span class="line">            <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 以下两种情况不展示之前的 Activity 预览</span></span><br><span class="line">            <span class="keyword">if</span> (prev.getTask() != prevTask) &#123;</span><br><span class="line">                    <span class="comment">// 之前的 Activity 在不同的 Task</span></span><br><span class="line">                prev = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prev.nowVisible) &#123;</span><br><span class="line">                    <span class="comment">// 现在可见</span></span><br><span class="line">                 prev = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 显示启动 Activity 的 Window</span></span><br><span class="line">        r.showStartingWindow(prev, newTask, isTaskSwitch(r, focusedTopActivity));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当前为栈顶 Activity</span></span><br><span class="line">            ActivityOptions.abort(options);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ActivityStack.startActivityLocked</code> 主要是创建 WindowContainer，同时显示 Window</p><h3 id="ActivityStackSupervisor"><a href="#ActivityStackSupervisor" class="headerlink" title="ActivityStackSupervisor"></a>ActivityStackSupervisor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (targetStack != <span class="keyword">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">        <span class="comment">// 存在 targetStack</span></span><br><span class="line">    <span class="keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="keyword">null</span> || r.state != RESUMED) &#123;</span><br><span class="line">        <span class="comment">// 恢复聚焦 task</span></span><br><span class="line">    mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state == RESUMED) &#123;</span><br><span class="line">        <span class="comment">// 执行应用转场动画</span></span><br><span class="line">    mFocusedStack.executeAppTransition(targetOptions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ActivityStack-1"><a href="#ActivityStack-1" class="headerlink" title="ActivityStack"></a>ActivityStack</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line">        <span class="comment">// 防止递归</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 设置恢复标记</span></span><br><span class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line">        result = resumeTopActivityInnerLocked(prev, options);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在恢复过程中，确保必要的暂停逻辑</span></span><br><span class="line">    mStackSupervisor.checkReadyForSleepLocked();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 寻找需要恢复的栈顶 Activity，它必须是未结束并且聚焦</span></span><br><span class="line">    <span class="keyword">final</span> ActivityRecord next = topRunningActivityLocked(<span class="keyword">true</span> <span class="comment">/* focusableOnly */</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> hasRunningActivity = next != <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord parent = mActivityContainer.mParentActivity;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> isParentNotResumed = parent != <span class="keyword">null</span> &amp;&amp; parent.state != ActivityState.RESUMED;</span><br><span class="line">    <span class="keyword">if</span> (hasRunningActivity</span><br><span class="line">                &amp;&amp; (isParentNotResumed || !mActivityContainer.isAttachedLocked())) &#123;</span><br><span class="line">           <span class="comment">// 如果父 Activity 不是恢复状态，则不恢复当前 Activity</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!hasRunningActivity) &#123;</span><br><span class="line">        <span class="comment">// 当前 Task 没有需要恢复的 Activity</span></span><br><span class="line">    <span class="keyword">return</span> resumeTopActivityInNextFocusableStack(prev, options, <span class="string">"noMoreActivities"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</span><br><span class="line">                    mStackSupervisor.allResumedActivitiesComplete()) &#123;</span><br><span class="line">        <span class="comment">// 如果 Activity 已经是恢复状态</span></span><br><span class="line">        <span class="comment">// 确保已经执行了所有等待的转场</span></span><br><span class="line">        executeAppTransition(options);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mService.isSleepingOrShuttingDownLocked()</span><br><span class="line">                &amp;&amp; mLastPausedActivity == next</span><br><span class="line">                &amp;&amp; mStackSupervisor.allPausedActivitiesComplete()) &#123;</span><br><span class="line">    <span class="comment">// 如果系统处于休眠状态，当前 Activity 处于暂停状态</span></span><br><span class="line">        <span class="comment">// 确保转场执行</span></span><br><span class="line">        executeAppTransition(options);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!mService.mUserController.hasStartedUserState(next.userId)) &#123;</span><br><span class="line">        <span class="comment">// 如果拥有该 Activity 的用户没有启动</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!mStackSupervisor.allPausedActivitiesComplete()) &#123;</span><br><span class="line">    <span class="comment">// 如果存在暂停 Activity 的操作未完成</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">boolean</span> lastResumedCanPip = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> ActivityStack lastFocusedStack = mStackSupervisor.getLastStack();</span><br><span class="line">    <span class="keyword">if</span> (lastFocusedStack != <span class="keyword">null</span> &amp;&amp; lastFocusedStack != <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord lastResumed = lastFocusedStack.mResumedActivity;</span><br><span class="line">        <span class="comment">// 最后一个恢复的 Activity 是否可以 画中画</span></span><br><span class="line">        lastResumedCanPip = lastResumed != <span class="keyword">null</span> &amp;&amp; lastResumed.checkEnterPictureInPictureState(</span><br><span class="line">                    <span class="string">"resumeTopActivity"</span>, <span class="keyword">true</span> <span class="comment">/* noThrow */</span>, userLeaving <span class="comment">/* beforeStopping */</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否需要可以在上一个 Activity 暂停时进行恢复</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> resumeWhilePausing = (next.info.flags &amp; FLAG_RESUME_WHILE_PAUSING) != <span class="number">0</span></span><br><span class="line">                &amp;&amp; !lastResumedCanPip;</span><br><span class="line">    <span class="comment">// 是否暂停了回退的 task</span></span><br><span class="line">    <span class="keyword">boolean</span> pausing = mStackSupervisor.pauseBackStacks(userLeaving, next, <span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mResumedActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 暂停上一个恢复状态的 Activity</span></span><br><span class="line">    pausing |= startPausingLocked(userLeaving, <span class="keyword">false</span>, next, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (pausing &amp;&amp; !resumeWhilePausing) &#123;</span><br><span class="line">    <span class="comment">// 之前的 Activity 已经暂停，但不能进行恢复当前 Activity</span></span><br><span class="line">        <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// hosting application，一般不执行</span></span><br><span class="line">            <span class="comment">// 让当前 Activity 放在 Lru 的顶部，避免早早杀死</span></span><br><span class="line">        mService.updateLruProcessLocked(next.app, <span class="keyword">true</span>, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mResumedActivity == next &amp;&amp; next.state == ActivityState.RESUMED &amp;&amp;</span><br><span class="line">                mStackSupervisor.allResumedActivitiesComplete()) &#123;</span><br><span class="line">    <span class="comment">// 当前需要恢复的 Activity 已经是恢复状态</span></span><br><span class="line">        <span class="comment">// 确保执行转场</span></span><br><span class="line">        executeAppTransition(options);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mService.isSleepingLocked() &amp;&amp; mLastNoHistoryActivity != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                !mLastNoHistoryActivity.finishing) &#123;</span><br><span class="line">        <span class="comment">// 结束因为系统休眠而还没结束的 Activity</span></span><br><span class="line">    requestFinishActivityLocked(mLastNoHistoryActivity.appToken, Activity.RESULT_CANCELED,</span><br><span class="line">                    <span class="keyword">null</span>, <span class="string">"resume-no-history"</span>, <span class="keyword">false</span>);</span><br><span class="line">        mLastNoHistoryActivity = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (prev != <span class="keyword">null</span> &amp;&amp; prev != next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mStackSupervisor.mActivitiesWaitingForVisibleActivity.contains(prev)</span><br><span class="line">                    &amp;&amp; next != <span class="keyword">null</span> &amp;&amp; !next.nowVisible) &#123;</span><br><span class="line">        mStackSupervisor.mActivitiesWaitingForVisibleActivity.add(prev);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果当前需要恢复的 Activity 已经可见，所有隐藏上一个 Activity</span></span><br><span class="line">            <span class="keyword">if</span> (prev.finishing) &#123;</span><br><span class="line">            prev.setVisibility(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Activity 转场处理</span></span><br><span class="line">    </span><br><span class="line">    ActivityStack lastStack = mStackSupervisor.getLastStack();</span><br><span class="line">    <span class="keyword">if</span> (next.app != <span class="keyword">null</span> &amp;&amp; next.app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 上一个 Activity 是否为透明</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> lastActivityTranslucent = lastStack != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; (!lastStack.mFullscreen</span><br><span class="line">                    || (lastStack.mLastPausedActivity != <span class="keyword">null</span></span><br><span class="line">                    &amp;&amp; !lastStack.mLastPausedActivity.fullscreen));</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!next.visible || next.stopped || lastActivityTranslucent) &#123;</span><br><span class="line">            <span class="comment">// 前一个 Activity 为透明，并且当前 Activity 还没显示</span></span><br><span class="line">            <span class="comment">// 设置为显示状态</span></span><br><span class="line">            next.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 让窗口管理器重新基于新的 Activity 顺序评估屏幕的方向</span></span><br><span class="line">    <span class="keyword">boolean</span> notUpdated = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (mStackSupervisor.isFocusedStack(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">final</span> Configuration config = mWindowManager.updateOrientationFromAppTokens(</span><br><span class="line">                        mStackSupervisor.getDisplayOverrideConfiguration(mDisplayId),</span><br><span class="line">                        next.mayFreezeScreenLocked(next.app) ? next.appToken : <span class="keyword">null</span>, mDisplayId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line">    next.frozenBeforeDestroy = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        notUpdated = !mService.updateDisplayOverrideConfigurationLocked(config, next,</span><br><span class="line">                        <span class="keyword">false</span> <span class="comment">/* deferResume */</span>, mDisplayId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span> (notUpdated) &#123;</span><br><span class="line">         <span class="comment">// 配置发生更新无法保持已经存在的 Activity 实例</span></span><br><span class="line">         <span class="comment">// 重新获取需要恢复的 Activity</span></span><br><span class="line">         ActivityRecord nextNext = topRunningActivityLocked();</span><br><span class="line">         <span class="comment">// 确保 Activity 仍然保持在栈顶，同时安排另外一次执行</span></span><br><span class="line">         <span class="keyword">if</span> (nextNext != next) &#123;</span><br><span class="line">         mStackSupervisor.scheduleResumeTopActivities();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (!next.visible || next.stopped) &#123;</span><br><span class="line">         next.setVisibility(<span class="keyword">true</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         next.completeResumeLocked();</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 传递所有等待的结果</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (next.newIntents != <span class="keyword">null</span>)&#123;</span><br><span class="line">            next.app.thread.scheduleNewIntent(</span><br><span class="line">                            next.newIntents, next.appToken, <span class="keyword">false</span> <span class="comment">/* andPause */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        next.notifyAppResumed(next.stopped);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 准备恢复 Activity</span></span><br><span class="line">        next.app.thread.scheduleResumeActivity(next.appToken, next.app.repProcState,</span><br><span class="line">                        mService.isNextTransitionForward(), resumeAnimOptions);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        <span class="comment">// 发生异常，重新启动 Activity</span></span><br><span class="line">        mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            next.completeResumeLocked();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 发生异常，结束 Activity</span></span><br><span class="line">            requestFinishActivityLocked(next.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="string">"resume-exception"</span>, <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 需要启动 Activity</span></span><br><span class="line">        mStackSupervisor.startSpecificActivityLocked(next, <span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果可以不需要重新启动 Activity，则直接恢复 Activity 即可，否则进行重新启动流程：</p><h3 id="ActivityStackSupervisor-1"><a href="#ActivityStackSupervisor-1" class="headerlink" title="ActivityStackSupervisor"></a>ActivityStackSupervisor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startSpecificActivityLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取应用进程信息</span></span><br><span class="line">    ProcessRecord app = mService.getProcessRecordLocked(r.processName,</span><br><span class="line">                r.info.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (app != <span class="keyword">null</span> &amp;&amp; app.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果进程已经启动</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            realStartActivityLocked(r, app, andResume, checkConfig);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (RemoteException e)&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 启动应用进程</span></span><br><span class="line">    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="keyword">true</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="string">"activity"</span>, r.intent.getComponent(), <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">realStartActivityLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 冻结屏幕</span></span><br><span class="line">    r.startFreezingScreenLocked(app, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (checkConfig) &#123;</span><br><span class="line">    <span class="comment">// 根据新的 Activity 顺序重新评估屏幕的方向</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> idx = app.activities.indexOf(r);</span><br><span class="line">    <span class="keyword">if</span> (idx &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 将 Activity 添加到应用进程中</span></span><br><span class="line">        app.activities.add(r);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        app.thread.scheduleLaunchActivity();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(RemoteException e)&#123;</span><br><span class="line">        <span class="comment">// 发生异常，结束 Activity</span></span><br><span class="line">        stack.requestFinishActivityLocked(r.appToken, Activity.RESULT_CANCELED, <span class="keyword">null</span>,</span><br><span class="line">                        <span class="string">"2nd-crash"</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动流程最后还是回到了 ApplicationThread</p><h3 id="ApplicationThread"><a href="#ApplicationThread" class="headerlink" title="ApplicationThread"></a>ApplicationThread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">scheduleLaunchActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 Handler 发送 LAUNCH_ACTIVITY</span></span><br><span class="line">    sendMessage(H.LAUNCH_ACTIVITY, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们单独把 LAUNCH_ACTIVITY 的处理拿出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ActivityClientRecord r = (ActivityClientRecord) msg.obj;</span><br><span class="line">r.packageInfo = getPackageInfoNoCheck(</span><br><span class="line">                            r.activityInfo.applicationInfo, r.compatInfo);</span><br><span class="line">handleLaunchActivity(r, <span class="keyword">null</span>, <span class="string">"LAUNCH_ACTIVITY"</span>);</span><br></pre></td></tr></table></figure><h3 id="ActivityThread"><a href="#ActivityThread" class="headerlink" title="ActivityThread"></a>ActivityThread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleLaunchActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行启动 Activity</span></span><br><span class="line">    Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line">    <span class="keyword">if</span> (a != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// resume activity</span></span><br><span class="line">        handleResumeActivity(r.token, <span class="keyword">false</span>, r.isForward,</span><br><span class="line">                    !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">performLaunchActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Activity 信息初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 context</span></span><br><span class="line">    ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">    Activity activity = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">        <span class="comment">// 构建 Activity</span></span><br><span class="line">        activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Application app = r.packageInfo.makeApplication(<span class="keyword">false</span>, mInstrumentation);</span><br><span class="line">        <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</span><br><span class="line">        activity.attach();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 通过 Instrumentation 执行 Activity onCreate</span></span><br><span class="line">            <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                 mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">                <span class="comment">// Activity onStart</span></span><br><span class="line">            activity.performStart();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 通过 Instrumentation 执行 Activity onRestoreInstanceState</span></span><br><span class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r.state != <span class="keyword">null</span> || r.persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</span><br><span class="line">                                    r.persistentState);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r.state != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">             <span class="comment">// 通过 Instrumentation 执行 Activity onPostCreeate</span></span><br><span class="line">            <span class="keyword">if</span> (!r.activity.mFinished) &#123;</span><br><span class="line">            <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state,</span><br><span class="line">                                r.persistentState);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnPostCreate(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> activity;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">handleResumeActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    r = performResumeActivity();</span><br><span class="line">    <span class="keyword">if</span>(r != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Activity a = r.activity;</span><br><span class="line">        <span class="keyword">if</span> (r.window == <span class="keyword">null</span> &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">            r.window = r.activity.getWindow();</span><br><span class="line">            View decor = r.window.getDecorView();</span><br><span class="line">            decor.setVisibility(View.INVISIBLE);</span><br><span class="line">            ViewManager wm = a.getWindowManager();</span><br><span class="line">            <span class="keyword">if</span> (a.mVisibleFromClient) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!a.mWindowAdded) &#123;</span><br><span class="line">                a.mWindowAdded = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">// window</span></span><br><span class="line">                    wm.addView(decor, l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ActivityClientRecord <span class="title">performResumeActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; !r.activity.mFinished) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理等待的 Intent</span></span><br><span class="line">            <span class="keyword">if</span> (r.pendingIntents != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deliverNewIntents(r, r.pendingIntents);</span><br><span class="line">                r.pendingIntents = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理等待的 result</span></span><br><span class="line">            <span class="keyword">if</span> (r.pendingResults != <span class="keyword">null</span>) &#123;</span><br><span class="line">            deliverResults(r, r.pendingResults);</span><br><span class="line">                r.pendingResults = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行 resume</span></span><br><span class="line">            r.activity.performResume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instrumentation-1"><a href="#Instrumentation-1" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">newActivity</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Activity)cl.loadClass(className).newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callActivityOnCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    prePerformCreate(activity);</span><br><span class="line">    activity.performCreate(icicle);</span><br><span class="line">    postPerformCreate(activity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Activity-1"><a href="#Activity-1" class="headerlink" title="Activity"></a>Activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    restoreHasCurrentPermissionRequest(icicle);</span><br><span class="line">    <span class="comment">// 调用 onCreate</span></span><br><span class="line">    onCreate(icicle);</span><br><span class="line">    mActivityTransitionState.readState(icicle);</span><br><span class="line">    performCreateCommon();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mActivityTransitionState.setEnterActivityOptions(<span class="keyword">this</span>, getActivityOptions());</span><br><span class="line">    mInstrumentation.callActivityOnStart(<span class="keyword">this</span>);</span><br><span class="line">    mActivityTransitionState.enterReady(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 执行 restart</span></span><br><span class="line">    performRestart();</span><br><span class="line">    mInstrumentation.callActivityOnResume(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">        mStopped = <span class="keyword">false</span>;</span><br><span class="line">        mInstrumentation.callActivityOnRestart(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 执行 start</span></span><br><span class="line">        performStart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Instrumentation-2"><a href="#Instrumentation-2" class="headerlink" title="Instrumentation"></a>Instrumentation</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activity.onStart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     activity.mResumed = <span class="keyword">true</span>;</span><br><span class="line">    activity.onResume();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callActivityOnRestart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    activity.onRestart();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单总结下 Activity 的启动流程：</p><ol><li>从用户应用进程开始启动，如果从桌面启动，则为 launcher 进程，用户进程通过 Binder 机制与 system_server 进程进行通信</li><li>ActivityManagerService 用于管理所有的 Activity 活动<ul><li>当接受到启动 Activity 的调用时，使用 <code>resolveActivity</code> ，查询系统中符合要求的 Activity</li><li>创建使用合适的  ActivityStack 和 launch flags 来启动 Activity</li><li>如果存在可以直接恢复 Activity，则恢复，否则重新启动 Activity</li><li>如果不存在应用进程，先创建应用进程</li></ul></li><li>最终启动流程又会通过 Binder 调用回应用进程，使用 ActivityThread 去执行<ul><li>使用 Instrumentation 去通过反射构建 Activity 实例</li><li>使用 Handler 机制调用 Activity 的生命周期</li></ul></li></ol><p>下面的图例来自<a href="http://gityuan.com/2016/03/12/start-activity/" target="_blank" rel="noopener">博客</a>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://gityuan.com/images/activity/start_activity_process.jpg" alt="启动流程" title="">                </div>                <div class="image-caption">启动流程</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于 Android 26，分析 Android Activity 启动流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Android Framework" scheme="https://linxiaotao.github.io/categories/Android-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Android消息机制-Handler</title>
    <link href="https://linxiaotao.github.io/2018/03/23/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6-Handler/"/>
    <id>https://linxiaotao.github.io/2018/03/23/Android消息机制-Handler/</id>
    <published>2018-03-23T12:29:21.000Z</published>
    <updated>2018-03-27T01:21:48.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://gityuan.com/2015/12/26/handler-message-framework/" target="_blank" rel="noopener">Android消息机制1-Handler(Java层)</a></p><p><a href="http://gityuan.com/2015/12/27/handler-message-native/" target="_blank" rel="noopener">Android消息机制2-Handler(Native层)</a></p><p><a href="http://blog.csdn.net/luoshengyang/article/details/6817933" target="_blank" rel="noopener">Android应用程序消息处理机制（Looper、Handler）分析</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E9%81%93_(Unix" target="_blank" rel="noopener">管道(Unix)</a>)</p><p><a href="https://zh.wikipedia.org/zh-hans/Epoll" target="_blank" rel="noopener">Epoll</a></p><p><a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6" target="_blank" rel="noopener">文件描述符</a></p><p>Handler 机制主要由四个部分组成：</p><ul><li>Looper</li><li>MessageQueue</li><li>Message</li><li>Handler</li></ul><h3 id="典型用法"><a href="#典型用法" class="headerlink" title="典型用法"></a>典型用法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Handler mHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        </span><br><span class="line">        mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// process incoming messages here</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h3><p>不断循环执行 <code>Looper.loop</code>，按分发机制将消息分发给目标处理者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建 Looper 存储到 ThreadLocal</span></span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sThreadLocal</code> 是一个 ThreadLocal 类型的静态变量</p><blockquote><p>ThreadLocal：线程本地存储区（Thread Local Storage），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的 TLS 区域</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Looper 中创建 MessageQueue</span></span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;                                                                     </span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();                                                               </span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;                                                                           </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;                                                                                           </span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;                                                       </span><br><span class="line">                                                                                                </span><br><span class="line">    <span class="comment">// Make sure the identity of this thread is that of the local process,                      </span></span><br><span class="line">    <span class="comment">// and keep track of what that identity token actually is.                                  </span></span><br><span class="line">    Binder.clearCallingIdentity();                                                              </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();                                           </span><br><span class="line">                                                                                                </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;                                                                                  </span><br><span class="line">        Message msg = queue.next(); <span class="comment">// 获取下一条 Message，可能会阻塞                                              </span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;                                                                      </span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.                         </span></span><br><span class="line">            <span class="keyword">return</span>;                                                                             </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">                                                                                                </span><br><span class="line">        <span class="comment">// This must be in a local variable, in case a UI event sets the logger                 </span></span><br><span class="line">        <span class="keyword">final</span> Printer logging = me.mLogging;                                                    </span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;                                                                  </span><br><span class="line">            logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +                        </span><br><span class="line">                    msg.callback + <span class="string">": "</span> + msg.what);                                            </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">                                                                                                </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> slowDispatchThresholdMs = me.mSlowDispatchThresholdMs;                       </span><br><span class="line">                                                                                                </span><br><span class="line">        <span class="comment">//省略</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> start = (slowDispatchThresholdMs == <span class="number">0</span>) ? <span class="number">0</span> : SystemClock.uptimeMillis();     </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> end;                                                                         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 分发 Message</span></span><br><span class="line">            msg.target.dispatchMessage(msg);                                                    </span><br><span class="line">            end = (slowDispatchThresholdMs == <span class="number">0</span>) ? <span class="number">0</span> : SystemClock.uptimeMillis();              </span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;                                                                             </span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;                                                                </span><br><span class="line">                Trace.traceEnd(traceTag);                                                       </span><br><span class="line">            &#125;                                                                                   </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">        <span class="keyword">if</span> (slowDispatchThresholdMs &gt; <span class="number">0</span>) &#123;                                                      </span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> time = end - start;                                                      </span><br><span class="line">            <span class="keyword">if</span> (time &gt; slowDispatchThresholdMs) &#123;                                               </span><br><span class="line">                Slog.w(TAG, <span class="string">"Dispatch took "</span> + time + <span class="string">"ms on "</span>                                  </span><br><span class="line">                        + Thread.currentThread().getName() + <span class="string">", h="</span> +                           </span><br><span class="line">                        msg.target + <span class="string">" cb="</span> + msg.callback + <span class="string">" msg="</span> + msg.what);               </span><br><span class="line">            &#125;                                                                                   </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">                                                                                                </span><br><span class="line">        <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;                                                                  </span><br><span class="line">            logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);            </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">                                                                                                </span><br><span class="line">        <span class="comment">// Make sure that during the course of dispatching the                                  </span></span><br><span class="line">        <span class="comment">// identity of the thread wasn't corrupted.                                             </span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();                                    </span><br><span class="line">        <span class="keyword">if</span> (ident != newIdent) &#123;                                                                </span><br><span class="line">            Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span>                                      </span><br><span class="line">                    + Long.toHexString(ident) + <span class="string">" to 0x"</span>                                        </span><br><span class="line">                    + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span>                     </span><br><span class="line">                    + msg.target.getClass().getName() + <span class="string">" "</span>                                     </span><br><span class="line">                    + msg.callback + <span class="string">" what="</span> + msg.what);                                      </span><br><span class="line">        &#125;                                                                                       </span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 释放 Message</span></span><br><span class="line">        msg.recycleUnchecked();                                                                 </span><br><span class="line">    &#125;                                                                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Looper.quit 最终调用的都是 MessageQueue.quit</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">false</span>); <span class="comment">// 移除消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitSafely</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mQueue.quit(<span class="keyword">true</span>); <span class="comment">// 安全移除消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue 在构造方法中，会调用 native 方法 <code>nativeInit</code> 方法，在 NativeMessageQueue 的构造方法中，会构造一个 JNI 层的 Looper</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/libs</span></span><br><span class="line">Looper::Looper(<span class="keyword">bool</span> allowNonCallbacks) :  </span><br><span class="line">    mAllowNonCallbacks(allowNonCallbacks),  </span><br><span class="line">    mResponseIndex(<span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 管道机制</span></span><br><span class="line">    <span class="keyword">int</span> wakeFds[<span class="number">2</span>];  </span><br><span class="line">    <span class="keyword">int</span> result = pipe(wakeFds);  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    mWakeReadPipeFd = wakeFds[<span class="number">0</span>];  </span><br><span class="line">    mWakeWritePipeFd = wakeFds[<span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOOPER_USES_EPOLL  </span></span><br><span class="line">    <span class="comment">// 分配新的 epoll 实例同时注册唤醒管道</span></span><br><span class="line">    mEpollFd = epoll_create(EPOLL_SIZE_HINT);  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span>  </span><br><span class="line">    <span class="built_in">memset</span>(&amp; eventItem, <span class="number">0</span>, <span class="keyword">sizeof</span>(epoll_event)); <span class="comment">// zero out unused members of data field union</span></span><br><span class="line">    <span class="comment">// 观察 EPOLLIN 事件</span></span><br><span class="line">    eventItem.events = EPOLLIN;  </span><br><span class="line">    eventItem.data.fd = mWakeReadPipeFd;  </span><br><span class="line">    result = epoll_ctl(mEpollFd, EPOLL_CTL_ADD, mWakeReadPipeFd, &amp; eventItem);  </span><br><span class="line">    ......  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line">    ......  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>管道：Linux 系统中的一种进程间通信机制。简单来说，管道就是一个文件，在管道的两端，分别是两个打开文件的文件描述符，这两个打开文件描述符都是对应同一个文件，其中一个是用来读的，别一个是用来写的，一般的使用方式就是，一个线程通过读文件描述符中来读管道的内容，当管道没有内容时，这个线程就会进入等待状态，而另外一个线程通过写文件描述符来向管道中写入内容，写入内容的时候，如果另一端正有线程正在等待管道中的内容，那么这个线程就会被唤醒。</p><p>epoll：Linux 系统中的 epoll 机制为处理大批量句柄而作了改进的 poll，是 Linux 下多路复用 IO 接口select/poll 的增强版本，它能显著减少程序在大量并发连接中只有少量活跃的情况下的系统 CPU 利用率。</p></blockquote><p>pipe 是 Linux 系统中的管道机制，用于 IPC，在管道机制的实现中，又使用 epoll 机制来监听读写事件。</p><p>以上在 Android 上的应用为，当 Java 层的消息队列中没有消息时，就使 Android 应用程序主线程进入等待状态，而当 Java 层的消息队列中来了新的消息后，就唤醒 Android 应用程序的主线程来处理这个消息。</p><h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;                                                  </span><br><span class="line">    <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;                                                                     </span><br><span class="line">        <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();                                          </span><br><span class="line">        <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;          </span><br><span class="line">                (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 匿名类、内部类或本地类都必须申明为 static，否则会警告出现内存泄漏</span></span><br><span class="line">            Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +      </span><br><span class="line">                klass.getCanonicalName());                                                          </span><br><span class="line">        &#125;                                                                                           </span><br><span class="line">    &#125;                                                                                               </span><br><span class="line">    <span class="comment">// 默认使用当前线程的 Looper                                                                                                </span></span><br><span class="line">    mLooper = Looper.myLooper();                                                                    </span><br><span class="line">    <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;                                                                          </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(                                                                 </span><br><span class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);             </span><br><span class="line">    &#125;                                                                                               </span><br><span class="line">    mQueue = mLooper.mQueue;                                                                        </span><br><span class="line">    mCallback = callback;</span><br><span class="line">    <span class="comment">// 是否为异步处理</span></span><br><span class="line">    mAsynchronous = async;                                                                          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Looper.loop</code> 中，当存在 Message 需要处理时，会调用 <code>dispatchMessage</code> 来进行分发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;      </span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 先调用 callback</span></span><br><span class="line">        handleCallback(msg);                    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                                    </span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 接着检查通过构造方法传进来的 Callback</span></span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123; </span><br><span class="line">                <span class="keyword">return</span>;                         </span><br><span class="line">            &#125;                                   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后调用 handleMessage</span></span><br><span class="line">        handleMessage(msg);                     </span><br><span class="line">    &#125;                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 Handler 发送消息：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://gityuan.com/images/handler/java_sendmessage.png" alt="发送消息调用链" title="">                </div>                <div class="image-caption">发送消息调用链</div>            </figure><p>最终所有的方法都会调用到 <code>MessageQueue.enqueueMessage</code></p><h3 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3><blockquote><p>消息机制中 Java 层和 C++ 层的连接纽带，大部分核心方法都交给 native 层来处理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MessageQueue(<span class="keyword">boolean</span> quitAllowed) &#123; </span><br><span class="line">    mQuitAllowed = quitAllowed;</span><br><span class="line">    <span class="comment">// used by native code</span></span><br><span class="line">    mPtr = nativeInit();            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MessageQueue 的初始化工作主要由 native 方法来执行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeInit</span><span class="params">(JNIEnv* env, jobject obj)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建一个 NativeMessageQueue，在它的构造方法中，也会创建一个 Looper，不过这个 Looper 对象实现是在 JNI 层</span></span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">new</span> NativeMessageQueue();  </span><br><span class="line">    <span class="keyword">if</span> (! nativeMessageQueue) &#123;  </span><br><span class="line">        jniThrowRuntimeException(env, <span class="string">"Unable to allocate native queue"</span>);  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 在这里，会 NativeMessageQueue 保存到 Java 层 MessageQueue 的 mPtr 变量中，这里保存的是一个偏移量</span></span><br><span class="line">    android_os_MessageQueue_setNativeMessageQueue(env, obj, nativeMessageQueue);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nativeInit</code> 中主要是在 JNI 层创建一个 NativeMessageQueue 并将偏移量保存在 MessageQueue 中的 <code>mPtr</code>，关联了 NativeMessageQueue 和 MessageQueue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span> </span>&#123;                                                                              </span><br><span class="line">    <span class="comment">// messsage loop has already quit                                                              </span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> ptr = mPtr;                                                                    </span><br><span class="line">    <span class="keyword">if</span> (ptr == <span class="number">0</span>) &#123;                                                                           </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;                                                                          </span><br><span class="line">    &#125;                                                                                         </span><br><span class="line">                                                                                              </span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration                       </span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;                                                            </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;                                                                                </span><br><span class="line">        <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;                                                     </span><br><span class="line">            Binder.flushPendingCommands();                                                    </span><br><span class="line">        &#125;                                                                                     </span><br><span class="line">        <span class="comment">// 阻塞操作，当等待nextPollTimeoutMillis时长，或者消息队列被唤醒，都会返回</span></span><br><span class="line">        <span class="comment">// ptr 是在 JNI 层创建的 NativeMessageQueue</span></span><br><span class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);                                           </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当前 nativePollOnce 返回后，查看消息队列中是否存在消息</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;                                                                 </span><br><span class="line">            <span class="comment">// 尝试检索下一条消息，如果找到则返回                            </span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();                                      </span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;                                                           </span><br><span class="line">            Message msg = mMessages;                                                          </span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;                                          </span><br><span class="line">                <span class="comment">// 找到下一条异步消息或者没有消息了，则退出循环</span></span><br><span class="line">                <span class="keyword">do</span> &#123;                                                                          </span><br><span class="line">                    prevMsg = msg;                                                            </span><br><span class="line">                    msg = msg.next;                                                           </span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());                               </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;                                                                </span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;                                                         </span><br><span class="line">                    <span class="comment">// 下一个消息还没准备好，重新设置唤醒超时时间</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                                                                      </span><br><span class="line">                    <span class="comment">// 获取一条消息                                                         </span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;                                                    </span><br><span class="line">                        prevMsg.next = msg.next;                                              </span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;                                                                  </span><br><span class="line">                        mMessages = msg.next;                                                 </span><br><span class="line">                    &#125;                                                                         </span><br><span class="line">                    msg.next = <span class="keyword">null</span>;                                                          </span><br><span class="line">                    <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                    <span class="comment">// 标记当前消息已使用</span></span><br><span class="line">                    msg.markInUse();                                                          </span><br><span class="line">                    <span class="keyword">return</span> msg;                                                               </span><br><span class="line">                &#125;                                                                             </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;                                                                          </span><br><span class="line">                <span class="comment">// 当前还没有消息，设置为 -1，无限等待中                                                     </span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;                                                   </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">                                                                                              </span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.      </span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;                                                                  </span><br><span class="line">                dispose();                                                                    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;                                                                  </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">                                                                                              </span><br><span class="line">            <span class="comment">// queue is empty or if the first message</span></span><br><span class="line">            <span class="comment">// get pending idle handler count</span></span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span>                                                   </span><br><span class="line">                    &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;                         </span><br><span class="line">                pendingIdleHandlerCount = mIdleHandlers.size();                               </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;                                               </span><br><span class="line">                <span class="comment">// 没有 idle handlers 需要运行，循环继续等待                        </span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;                                                              </span><br><span class="line">                <span class="keyword">continue</span>;                                                                     </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">                                                                                              </span><br><span class="line">            <span class="keyword">if</span> (mPendingIdleHandlers == <span class="keyword">null</span>) &#123;                                               </span><br><span class="line">                mPendingIdleHandlers = <span class="keyword">new</span> IdleHandler[Math.max(pendingIdleHandlerCount, <span class="number">4</span>)]; </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">            mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);               </span><br><span class="line">        &#125;                                                                                     </span><br><span class="line">                                                                                              </span><br><span class="line">        <span class="comment">// Run the idle handlers.                                                        </span></span><br><span class="line">        <span class="comment">// We only ever reach this code block during the first iteration                    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;                                   </span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];                                </span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>;           </span><br><span class="line">                                                                                              </span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;                                                             </span><br><span class="line">            <span class="keyword">try</span> &#123;                                                                             </span><br><span class="line">                keep = idler.queueIdle();                                                     </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;                                                           </span><br><span class="line">                Log.wtf(TAG, <span class="string">"IdleHandler threw exception"</span>, t);                               </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">                                                                                              </span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;                                                                      </span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);                                              </span><br><span class="line">                &#125;                                                                             </span><br><span class="line">            &#125;                                                                                 </span><br><span class="line">        &#125;                                                                                     </span><br><span class="line">                                                                                              </span><br><span class="line">        <span class="comment">// Reset the idle handler count to 0 so we do not run them again.                     </span></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;                                                          </span><br><span class="line">                                                                                              </span><br><span class="line">        <span class="comment">//不设置超时时间,因为可能在处理 IdleHandler 时可能有新的消息加入                </span></span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;                                                            </span><br><span class="line">    &#125;                                                                                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>next</code> 方法中，<code>nativePollOnce</code> 是阻塞操作，其中 <code>nextPollTimeoutMillis</code> 代表下一个消息到来之前，还需要等待的时长；<code>nextPollTimeoutMillis == -1</code> 表示当前没有更多消息。<code>nativePollOnce</code> 调用结束后，从 <code>mMessages</code> 中提取一个消息</p><p>当处于空闲时，执行 <code>IdleHandler</code> 中的回调方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativePollOnce</span><span class="params">(JNIEnv* env, jobject obj,  </span></span></span><br><span class="line"><span class="function"><span class="params">        jint ptr, jint timeoutMillis)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过前面设置的 mPrt 获取 NativeMessageQueue</span></span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr); </span><br><span class="line">    <span class="comment">// 调用 NativeMessageQueue.pollOnce 进行轮询</span></span><br><span class="line">    nativeMessageQueue-&gt;pollOnce(timeoutMillis);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> NativeMessageQueue::pollOnce(<span class="keyword">int</span> timeoutMillis) &#123;</span><br><span class="line">    <span class="comment">// 将调用转发给了 JNI 层的 Looper</span></span><br><span class="line">    mLooper-&gt;pollOnce(timeoutMillis);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pollOnce</code> 会调用 <code>pollnner</code> 来进一步操作，如果 <code>pollnner</code> 返回值不等于 0，则返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/libs/utils/Looper.cpp</span></span><br><span class="line"><span class="keyword">int</span> Looper::pollInner(<span class="keyword">int</span> timeoutMillis) &#123;  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> result = ALOOPER_POLL_WAKE;  </span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOOPER_USES_EPOLL  </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItems</span>[<span class="title">EPOLL_MAX_EVENTS</span>];</span></span><br><span class="line">    <span class="comment">// 调用 epoll_wait 检查 epoll 专用文件描述符 mEpollFd 所监控的文件描述符是否有 IO 事件,超时时间为 timeoutMillis</span></span><br><span class="line">    <span class="comment">// 在 JNI 层的 Looper 构造函数中，设置了要监控 mWakeReadPipeFd 文件描述符的 EPOLLIN 事件</span></span><br><span class="line">    <span class="comment">// 如果检查成功或者超时，则结束等待</span></span><br><span class="line">    <span class="comment">// 处于 Idle 状态</span></span><br><span class="line">    <span class="keyword">int</span> eventCount = epoll_wait(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line">    <span class="keyword">bool</span> acquiredLock = <span class="literal">false</span>;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line">    ......  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// eventCount &lt; 0 可能出错了</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (errno == EINTR) &#123;  </span><br><span class="line">            <span class="keyword">goto</span> Done;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        LOGW(<span class="string">"Poll failed with an unexpected error, errno=%d"</span>, errno);  </span><br><span class="line">        result = ALOOPER_POLL_ERROR;  </span><br><span class="line">        <span class="keyword">goto</span> Done;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// eventCount == 0 超时</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount == <span class="number">0</span>) &#123;  </span><br><span class="line">        ......  </span><br><span class="line">        result = ALOOPER_POLL_TIMEOUT;  </span><br><span class="line">        <span class="keyword">goto</span> Done;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOOPER_USES_EPOLL</span></span><br><span class="line">    <span class="comment">// eventCount &gt; 0 存在事件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;  </span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;  </span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;  </span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeReadPipeFd) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                <span class="comment">// Looper 中使用 epoll 监听的 EPOLLIN 事件</span></span><br><span class="line">                awoken();  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                LOGW(<span class="string">"Ignoring unexpected epoll events 0x%x on wake read pipe."</span>, epollEvents);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            ......  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (acquiredLock) &#123;  </span><br><span class="line">        mLock.unlock();  </span><br><span class="line">    &#125;  </span><br><span class="line">Done: ;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>  </span></span><br><span class="line">    ......  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line">  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Looper::awoken() &#123;  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">16</span>];  </span><br><span class="line">    <span class="keyword">ssize_t</span> nRead;  </span><br><span class="line">    <span class="keyword">do</span> &#123;  </span><br><span class="line">        nRead = read(mWakeReadPipeFd, buffer, <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">    &#125; <span class="keyword">while</span> ((nRead == <span class="number">-1</span> &amp;&amp; errno == EINTR) || nRead == <span class="keyword">sizeof</span>(buffer));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结上面的代码，Looper 通过 <code>loop</code> 调用 MessageQueue 的 <code>next</code>，<code>next</code> 中又会调用到 native 方法 <code>nativePollOnce</code>，在这个方法中，会调用到 NativeMessageQueue 的 <code>pollInner</code>，这里会通过在 JNI 层 Looper 的构造方法中，使用 epoll 监听管道 EPOLLIN 事件，如果存在调用 <code>awoken</code>，清空管道中的内容，以便下次再调用pollInner函数时，知道自从上次处理完消息队列中的消息后，有没有新的消息加进来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;                                         </span><br><span class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;                                                            </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);               </span><br><span class="line">    &#125;                                                                                    </span><br><span class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;                                                                 </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);       </span><br><span class="line">    &#125;                                                                                    </span><br><span class="line">                                                                                         </span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;                                                                </span><br><span class="line">        <span class="keyword">if</span> (mQuitting) &#123;                                                                 </span><br><span class="line">            IllegalStateException e = <span class="keyword">new</span> IllegalStateException(                         </span><br><span class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);      </span><br><span class="line">            Log.w(TAG, e.getMessage(), e);                                               </span><br><span class="line">            msg.recycle();                                                               </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;                                                                </span><br><span class="line">        &#125;                                                                                </span><br><span class="line">                                                                                         </span><br><span class="line">        msg.markInUse();                                                                 </span><br><span class="line">        msg.when = when;                                                                 </span><br><span class="line">        Message p = mMessages;                                                           </span><br><span class="line">        <span class="keyword">boolean</span> needWake;                                                                </span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;                                   </span><br><span class="line">            <span class="comment">// 不存在头部消息或立即执行或执行时机快于头部消息</span></span><br><span class="line">            <span class="comment">// 将处理的消息作为新的头部消息</span></span><br><span class="line">            msg.next = p;                                                                </span><br><span class="line">            mMessages = msg;                                                             </span><br><span class="line">            needWake = mBlocked;                                                         </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                                                                         </span><br><span class="line">            <span class="comment">// 将处理的消息插入到队列的尾部</span></span><br><span class="line">            <span class="comment">// 一般不需要唤醒事件队列，除非消息头存在 barrier，并且当前处理的消息是队列中最早的异步消息</span></span><br><span class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();             </span><br><span class="line">            Message prev;                                                                </span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;                                                                   </span><br><span class="line">                prev = p;                                                                </span><br><span class="line">                p = p.next;                                                              </span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;                                        </span><br><span class="line">                    <span class="keyword">break</span>;                                                               </span><br><span class="line">                &#125;                                                                        </span><br><span class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;                                    </span><br><span class="line">                    needWake = <span class="keyword">false</span>;                                                    </span><br><span class="line">                &#125;                                                                        </span><br><span class="line">            &#125;                                                                            </span><br><span class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next                                   </span></span><br><span class="line">            prev.next = msg;                                                             </span><br><span class="line">        &#125;                                                                                </span><br><span class="line">                                                                                         </span><br><span class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.                           </span></span><br><span class="line">        <span class="keyword">if</span> (needWake) &#123;                                                                  </span><br><span class="line">            nativeWake(mPtr);                                                            </span><br><span class="line">        &#125;                                                                                </span><br><span class="line">    &#125;                                                                                    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;                                                                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MessageQueue</code> 是按照消息触发时间的先后顺序排列的，队列头部的消息是最早触发的。当有消息加入，会从队列头部开始遍历，插入到合适的位置，以保证所有消息的时间顺序。</p><p>如果当前线程处于空闲等待状态，那么还需要调用 <code>nativeWake</code> 来唤醒：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/core/jni/android_os_MessageQueue.cpp</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">android_os_MessageQueue_nativeWake</span><span class="params">(JNIEnv* env, jobject obj, jint ptr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ptr 获取 NativeMessageQueue</span></span><br><span class="line">    NativeMessageQueue* nativeMessageQueue = <span class="keyword">reinterpret_cast</span>&lt;NativeMessageQueue*&gt;(ptr);  </span><br><span class="line">    <span class="keyword">return</span> nativeMessageQueue-&gt;wake();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将唤醒请求转发到 Looper <code>wake</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frameworks/base/libs/utils/Looper.cpp</span></span><br><span class="line"><span class="keyword">void</span> Looper::wake() &#123;  </span><br><span class="line">    ......  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite;  </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 先管道中写入 "W</span></span><br><span class="line">        nWrite = write(mWakeWritePipeFd, <span class="string">"W"</span>, <span class="number">1</span>);  </span><br><span class="line">    &#125; <span class="keyword">while</span> (nWrite == <span class="number">-1</span> &amp;&amp; errno == EINTR);  </span><br><span class="line">  </span><br><span class="line">    .......  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>往管道写入内容，从而唤醒线程，因为当消息队列中没有消息处理时，线程会进入空闲等待状态，具体是通过 Looper 的 <code>polllnner</code> 中调用 <code>epoll_wait</code> 进入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeMessages</span><span class="params">(Handler h, <span class="keyword">int</span> what, Object object)</span> </span>&#123;     </span><br><span class="line">    <span class="keyword">if</span> (h == <span class="keyword">null</span>) &#123;                                          </span><br><span class="line">        <span class="keyword">return</span>;                                               </span><br><span class="line">    &#125;                                                         </span><br><span class="line">                                                              </span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;                                     </span><br><span class="line">        Message p = mMessages;                                </span><br><span class="line">                                                              </span><br><span class="line">        <span class="comment">// 从队列头部开始，移除连续的所有符合条件的消息                     </span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span> &amp;&amp; p.target == h &amp;&amp; p.what == what   </span><br><span class="line">               &amp;&amp; (object == <span class="keyword">null</span> || p.obj == object)) &#123;      </span><br><span class="line">            Message n = p.next;                               </span><br><span class="line">            mMessages = n;</span><br><span class="line">            <span class="comment">// 找到对应的消息，释放它</span></span><br><span class="line">            p.recycleUnchecked();                             </span><br><span class="line">            p = n;                                            </span><br><span class="line">        &#125;                                                     </span><br><span class="line">                                                              </span><br><span class="line">        <span class="comment">//  从新的队列头部开始，移除全部符合条件的消息                  </span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="keyword">null</span>) &#123;                                   </span><br><span class="line">            Message n = p.next;                               </span><br><span class="line">            <span class="keyword">if</span> (n != <span class="keyword">null</span>) &#123;                                  </span><br><span class="line">                <span class="keyword">if</span> (n.target == h &amp;&amp; n.what == what           </span><br><span class="line">                    &amp;&amp; (object == <span class="keyword">null</span> || n.obj == object)) &#123; </span><br><span class="line">                    Message nn = n.next;                      </span><br><span class="line">                    n.recycleUnchecked();                     </span><br><span class="line">                    p.next = nn;                              </span><br><span class="line">                    <span class="keyword">continue</span>;                                 </span><br><span class="line">                &#125;                                             </span><br><span class="line">            &#125;                                                 </span><br><span class="line">            p = n;                                            </span><br><span class="line">        &#125;                                                     </span><br><span class="line">    &#125;                                                         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>postSyncBarrier</code> 提交一个同步屏障，这将会阻止队列中消息的执行，直到手动调用 <code>removeSyncBarrier</code></p><p>当 MessageQueue 退出时，需要 <code>dispose</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Disposes of the underlying message queue.                 </span></span><br><span class="line"><span class="comment">// Must only be called on the looper thread or the finalizer.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> </span>&#123;                                     </span><br><span class="line">    <span class="keyword">if</span> (mPtr != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// native 方法</span></span><br><span class="line">        nativeDestroy(mPtr);</span><br><span class="line">        <span class="comment">// mPtr 是记录 JNI 层的 NativeMessageQueue 的偏移量</span></span><br><span class="line">        mPtr = <span class="number">0</span>;                                            </span><br><span class="line">    &#125;                                                        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nativeDestroy</code> 最终会调用 RefBase 的 <code>decStrong</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> RefBase::decStrong(<span class="keyword">const</span> <span class="keyword">void</span>* id) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    weakref_impl* <span class="keyword">const</span> refs = mRefs;</span><br><span class="line">    refs-&gt;removeStrongRef(id); <span class="comment">//移除强引用</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int32_t</span> c = android_atomic_dec(&amp;refs-&gt;mStrong);</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line">        refs-&gt;mBase-&gt;onLastStrongRef(id);</span><br><span class="line">        <span class="keyword">if</span> ((refs-&gt;mFlags&amp;OBJECT_LIFETIME_MASK) == OBJECT_LIFETIME_STRONG) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    refs-&gt;decWeak(id); <span class="comment">// 移除弱引用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleUnchecked</span><span class="params">()</span> </span>&#123;                 </span><br><span class="line">    <span class="comment">// 标记为使用状态，清除其他状态     </span></span><br><span class="line">    flags = FLAG_IN_USE;                  </span><br><span class="line">    what = <span class="number">0</span>;                             </span><br><span class="line">    arg1 = <span class="number">0</span>;                             </span><br><span class="line">    arg2 = <span class="number">0</span>;                             </span><br><span class="line">    obj = <span class="keyword">null</span>;                           </span><br><span class="line">    replyTo = <span class="keyword">null</span>;                       </span><br><span class="line">    sendingUid = -<span class="number">1</span>;                      </span><br><span class="line">    when = <span class="number">0</span>;                             </span><br><span class="line">    target = <span class="keyword">null</span>;                        </span><br><span class="line">    callback = <span class="keyword">null</span>;                      </span><br><span class="line">    data = <span class="keyword">null</span>;                          </span><br><span class="line">                                          </span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;</span><br><span class="line">        <span class="comment">// 消息缓存</span></span><br><span class="line">        <span class="keyword">if</span> (sPoolSize &lt; MAX_POOL_SIZE) &#123;  </span><br><span class="line">            next = sPool;                 </span><br><span class="line">            sPool = <span class="keyword">this</span>;                 </span><br><span class="line">            sPoolSize++;                  </span><br><span class="line">        &#125;                                 </span><br><span class="line">    &#125;                                     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">()</span> </span>&#123;             </span><br><span class="line">    <span class="keyword">synchronized</span> (sPoolSync) &#123;               </span><br><span class="line">        <span class="keyword">if</span> (sPool != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 从缓存中获取</span></span><br><span class="line">            Message m = sPool;               </span><br><span class="line">            sPool = m.next;                  </span><br><span class="line">            m.next = <span class="keyword">null</span>;                   </span><br><span class="line">            m.flags = <span class="number">0</span>; <span class="comment">// clear in-use flag</span></span><br><span class="line">            sPoolSize--;                     </span><br><span class="line">            <span class="keyword">return</span> m;                        </span><br><span class="line">        &#125;                                    </span><br><span class="line">    &#125;                                        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Message();                    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://gityuan.com/images/handler/handler_java.jpg" alt="消息机制" title="">                </div>                <div class="image-caption">消息机制</div>            </figure><p>Java 层：</p><ul><li>Handler 通过 <code>sendMessage</code>，将 Message 通过 <code>MessageQueue.enqueueMessage</code> 添加到队列中</li><li>Looper 通过 <code>loop</code> 提取需要执行的 Message，并交与 <code>Message.target</code> 的 Handler 进行 <code>dispatchMessage</code> 分发</li><li>将 Message 添加到 MessageQueue 时，会唤醒 Looper 线程；如果 MessageQueue 中没有 Message 时，并处于 Idle 状态，则会执行 IdelHandler </li></ul><p>JNI 层：</p><ul><li>线程在进入循环之前，会在 JNI 创建管道(Pipe) ，当消息队列为空时，线程处于空闲等待状态</li><li>通过 epoll 机制监听 <code>EPOLLIN</code> 事件，当有新事件进入消息队列时，并且当前线程处于空闲状态，通过向管道写入数据，来唤醒线程</li></ul><p>消息分发的优先级：</p><ol><li><code>Message.callback.run()</code></li><li><code>Handler.mCallback.handleMessage()</code></li><li><code>Handler.handleMessage()</code></li></ol><blockquote><p>EPOLL：Linux 内核的可扩展 I/O 事件通知机制</p><p>PIPE：管道是一系列将标准输入输出链接起来的进程，其中每个进程的输出被直接作为下一个进程的输入</p><p>文件描述符(File descriptor)：用于表述指向<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">文件</a>的引用的抽象化概念</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://gityuan.com/2015/12/26/handler-message-framework/&quot; tar
      
    
    </summary>
    
      <category term="Android Framework" scheme="https://linxiaotao.github.io/categories/Android-Framework/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://linxiaotao.github.io/2018/03/17/hello-world/"/>
    <id>https://linxiaotao.github.io/2018/03/17/hello-world/</id>
    <published>2018-03-17T05:24:16.197Z</published>
    <updated>2018-03-26T11:48:18.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面朝大海，春暖花开"><a href="#面朝大海，春暖花开" class="headerlink" title="面朝大海，春暖花开"></a>面朝大海，春暖花开</h2><p>从明天起，做一个幸福的人</p><p>喂马、劈柴、周游世界</p><p>从明天起，关心粮食和蔬菜</p><p>我有一所房子，面朝大海，春暖花开</p><p>从明天起，和每一个亲人通信</p><p>告诉他们我的幸福</p><p>那幸福的闪电告诉我的</p><p>我将告诉每一个人</p><p>给每一条河每一座山取一个温暖的名字</p><p>陌生人，我也为你祝福</p><p>愿你有一个灿烂的前程</p><p>愿你有情人总成眷属</p><p>愿你在尘世获得幸福</p><p>我只愿面朝大海，春暖花开</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面朝大海，春暖花开&quot;&gt;&lt;a href=&quot;#面朝大海，春暖花开&quot; class=&quot;headerlink&quot; title=&quot;面朝大海，春暖花开&quot;&gt;&lt;/a&gt;面朝大海，春暖花开&lt;/h2&gt;&lt;p&gt;从明天起，做一个幸福的人&lt;/p&gt;
&lt;p&gt;喂马、劈柴、周游世界&lt;/p&gt;
&lt;p&gt;从明天起
      
    
    </summary>
    
      <category term="随笔" scheme="https://linxiaotao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
